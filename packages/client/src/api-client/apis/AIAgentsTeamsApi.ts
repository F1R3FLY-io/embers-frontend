/**
 * Embers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Address } from "@/entities/Address";

import type {
  AgentsTeam,
  AgentsTeams,
  CreateAgentsTeamReq,
  CreateAgentsTeamResp,
  DeployAgentsTeamReq,
  DeployAgentsTeamResp,
  RunDemoReq,
  SaveAgentsTeamResp,
  SignedContract,
} from "../models/index";

import {
  AgentsTeamFromJSON,
  AgentsTeamsFromJSON,
  CreateAgentsTeamReqToJSON,
  CreateAgentsTeamRespFromJSON,
  DeployAgentsTeamReqToJSON,
  DeployAgentsTeamRespFromJSON,
  RunDemoReqToJSON,
  SaveAgentsTeamRespFromJSON,
  SignedContractToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface ApiAiAgentsTeamsAddressGetRequest {
  address: Address;
}

export interface ApiAiAgentsTeamsAddressIdVersionsGetRequest {
  address: Address;
  id: string;
}

export interface ApiAiAgentsTeamsAddressIdVersionsVersionGetRequest {
  address: Address;
  id: string;
  version: string;
}

export interface ApiAiAgentsTeamsCreatePreparePostRequest {
  createAgentsTeamReq: CreateAgentsTeamReq;
}

export interface ApiAiAgentsTeamsCreateSendPostRequest {
  signedContract: SignedContract;
}

export interface ApiAiAgentsTeamsDeployPreparePostRequest {
  deployAgentsTeamReq: DeployAgentsTeamReq;
}

export interface ApiAiAgentsTeamsDeploySendPostRequest {
  signedContract: SignedContract;
}

export interface ApiAiAgentsTeamsIdSavePreparePostRequest {
  createAgentsTeamReq: CreateAgentsTeamReq;
  id: string;
}

export interface ApiAiAgentsTeamsIdSaveSendPostRequest {
  id: string;
  signedContract: SignedContract;
}

export interface ApiAiAgentsTeamsRunDemoPostRequest {
  runDemoReq: RunDemoReq;
}

/**
 *
 */
export class AIAgentsTeamsApi extends runtime.BaseAPI {
  /**
   */
  async apiAiAgentsTeamsAddressGetRaw(
    requestParameters: ApiAiAgentsTeamsAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AgentsTeams>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsTeamsAddressGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ai-agents-teams/{address}`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address.value)),
    );

    const response = await this.request(
      {
        headers: headerParameters,
        method: "GET",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentsTeamsFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTeamsAddressGet(
    requestParameters: ApiAiAgentsTeamsAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AgentsTeams> {
    const response = await this.apiAiAgentsTeamsAddressGetRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTeamsAddressIdVersionsGetRaw(
    requestParameters: ApiAiAgentsTeamsAddressIdVersionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AgentsTeams>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsTeamsAddressIdVersionsGet().',
      );
    }

    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsTeamsAddressIdVersionsGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ai-agents-teams/{address}/{id}/versions`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address.value)),
    );
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );

    const response = await this.request(
      {
        headers: headerParameters,
        method: "GET",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentsTeamsFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTeamsAddressIdVersionsGet(
    requestParameters: ApiAiAgentsTeamsAddressIdVersionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AgentsTeams> {
    const response = await this.apiAiAgentsTeamsAddressIdVersionsGetRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTeamsAddressIdVersionsVersionGetRaw(
    requestParameters: ApiAiAgentsTeamsAddressIdVersionsVersionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AgentsTeam>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsTeamsAddressIdVersionsVersionGet().',
      );
    }

    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsTeamsAddressIdVersionsVersionGet().',
      );
    }

    if (requestParameters.version == null) {
      throw new runtime.RequiredError(
        "version",
        'Required parameter "version" was null or undefined when calling apiAiAgentsTeamsAddressIdVersionsVersionGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ai-agents-teams/{address}/{id}/versions/{version}`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address.value)),
    );
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );
    urlPath = urlPath.replace(
      `{version}`,
      encodeURIComponent(String(requestParameters.version)),
    );

    const response = await this.request(
      {
        headers: headerParameters,
        method: "GET",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentsTeamFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTeamsAddressIdVersionsVersionGet(
    requestParameters: ApiAiAgentsTeamsAddressIdVersionsVersionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AgentsTeam> {
    const response = await this.apiAiAgentsTeamsAddressIdVersionsVersionGetRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTeamsCreatePreparePostRaw(
    requestParameters: ApiAiAgentsTeamsCreatePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateAgentsTeamResp>> {
    if (requestParameters.createAgentsTeamReq == null) {
      throw new runtime.RequiredError(
        "createAgentsTeamReq",
        'Required parameter "createAgentsTeamReq" was null or undefined when calling apiAiAgentsTeamsCreatePreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents-teams/create/prepare`;

    const response = await this.request(
      {
        body: CreateAgentsTeamReqToJSON(requestParameters.createAgentsTeamReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateAgentsTeamRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTeamsCreatePreparePost(
    requestParameters: ApiAiAgentsTeamsCreatePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateAgentsTeamResp> {
    const response = await this.apiAiAgentsTeamsCreatePreparePostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTeamsCreateSendPostRaw(
    requestParameters: ApiAiAgentsTeamsCreateSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.signedContract == null) {
      throw new runtime.RequiredError(
        "signedContract",
        'Required parameter "signedContract" was null or undefined when calling apiAiAgentsTeamsCreateSendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents-teams/create/send`;

    const response = await this.request(
      {
        body: SignedContractToJSON(requestParameters.signedContract),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiAiAgentsTeamsCreateSendPost(
    requestParameters: ApiAiAgentsTeamsCreateSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.apiAiAgentsTeamsCreateSendPostRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   */
  async apiAiAgentsTeamsDeployPreparePostRaw(
    requestParameters: ApiAiAgentsTeamsDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeployAgentsTeamResp>> {
    if (requestParameters.deployAgentsTeamReq == null) {
      throw new runtime.RequiredError(
        "deployAgentsTeamReq",
        'Required parameter "deployAgentsTeamReq" was null or undefined when calling apiAiAgentsTeamsDeployPreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents-teams/deploy/prepare`;

    const response = await this.request(
      {
        body: DeployAgentsTeamReqToJSON(requestParameters.deployAgentsTeamReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeployAgentsTeamRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTeamsDeployPreparePost(
    requestParameters: ApiAiAgentsTeamsDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeployAgentsTeamResp> {
    const response = await this.apiAiAgentsTeamsDeployPreparePostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTeamsDeploySendPostRaw(
    requestParameters: ApiAiAgentsTeamsDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.signedContract == null) {
      throw new runtime.RequiredError(
        "signedContract",
        'Required parameter "signedContract" was null or undefined when calling apiAiAgentsTeamsDeploySendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents-teams/deploy/send`;

    const response = await this.request(
      {
        body: SignedContractToJSON(requestParameters.signedContract),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiAiAgentsTeamsDeploySendPost(
    requestParameters: ApiAiAgentsTeamsDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.apiAiAgentsTeamsDeploySendPostRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   */
  async apiAiAgentsTeamsIdSavePreparePostRaw(
    requestParameters: ApiAiAgentsTeamsIdSavePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SaveAgentsTeamResp>> {
    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsTeamsIdSavePreparePost().',
      );
    }

    if (requestParameters.createAgentsTeamReq == null) {
      throw new runtime.RequiredError(
        "createAgentsTeamReq",
        'Required parameter "createAgentsTeamReq" was null or undefined when calling apiAiAgentsTeamsIdSavePreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    let urlPath = `/api/ai-agents-teams/{id}/save/prepare`;
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );

    const response = await this.request(
      {
        body: CreateAgentsTeamReqToJSON(requestParameters.createAgentsTeamReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SaveAgentsTeamRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTeamsIdSavePreparePost(
    requestParameters: ApiAiAgentsTeamsIdSavePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SaveAgentsTeamResp> {
    const response = await this.apiAiAgentsTeamsIdSavePreparePostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTeamsIdSaveSendPostRaw(
    requestParameters: ApiAiAgentsTeamsIdSaveSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsTeamsIdSaveSendPost().',
      );
    }

    if (requestParameters.signedContract == null) {
      throw new runtime.RequiredError(
        "signedContract",
        'Required parameter "signedContract" was null or undefined when calling apiAiAgentsTeamsIdSaveSendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    let urlPath = `/api/ai-agents-teams/{id}/save/send`;
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );

    const response = await this.request(
      {
        body: SignedContractToJSON(requestParameters.signedContract),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiAiAgentsTeamsIdSaveSendPost(
    requestParameters: ApiAiAgentsTeamsIdSaveSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.apiAiAgentsTeamsIdSaveSendPostRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   */
  async apiAiAgentsTeamsRunDemoPostRaw(
    requestParameters: ApiAiAgentsTeamsRunDemoPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters.runDemoReq == null) {
      throw new runtime.RequiredError(
        "runDemoReq",
        'Required parameter "runDemoReq" was null or undefined when calling apiAiAgentsTeamsRunDemoPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents-teams/run-demo`;

    const response = await this.request(
      {
        body: RunDemoReqToJSON(requestParameters.runDemoReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    }
    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async apiAiAgentsTeamsRunDemoPost(
    requestParameters: ApiAiAgentsTeamsRunDemoPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.apiAiAgentsTeamsRunDemoPostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }
}
