/**
 * Embers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateTestwalletResp,
  DeploySignedTestReq,
  DeploySignedTestResp,
  DeployTestReq,
  DeployTestResp,
} from "../models/index";

import {
  CreateTestwalletRespFromJSON,
  DeploySignedTestReqToJSON,
  DeploySignedTestRespFromJSON,
  DeployTestReqToJSON,
  DeployTestRespFromJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface ApiTestnetDeployPreparePostRequest {
  deployTestReq: DeployTestReq;
}

export interface ApiTestnetDeploySendPostRequest {
  deploySignedTestReq: DeploySignedTestReq;
}

/**
 *
 */
export class TestnetApi extends runtime.BaseAPI {
  /**
   */
  async apiTestnetDeployPreparePostRaw(
    requestParameters: ApiTestnetDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeployTestResp>> {
    if (requestParameters.deployTestReq == null) {
      throw new runtime.RequiredError(
        "deployTestReq",
        'Required parameter "deployTestReq" was null or undefined when calling apiTestnetDeployPreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/testnet/deploy/prepare`;

    const response = await this.request(
      {
        body: DeployTestReqToJSON(requestParameters.deployTestReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeployTestRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiTestnetDeployPreparePost(
    requestParameters: ApiTestnetDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeployTestResp> {
    const response = await this.apiTestnetDeployPreparePostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiTestnetDeploySendPostRaw(
    requestParameters: ApiTestnetDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeploySignedTestResp>> {
    if (requestParameters.deploySignedTestReq == null) {
      throw new runtime.RequiredError(
        "deploySignedTestReq",
        'Required parameter "deploySignedTestReq" was null or undefined when calling apiTestnetDeploySendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/testnet/deploy/send`;

    const response = await this.request(
      {
        body: DeploySignedTestReqToJSON(requestParameters.deploySignedTestReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeploySignedTestRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiTestnetDeploySendPost(
    requestParameters: ApiTestnetDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeploySignedTestResp> {
    const response = await this.apiTestnetDeploySendPostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiTestnetWalletPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateTestwalletResp>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const urlPath = `/api/testnet/wallet`;

    const response = await this.request(
      {
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateTestwalletRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiTestnetWalletPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateTestwalletResp> {
    const response = await this.apiTestnetWalletPostRaw(initOverrides);
    return response.value();
  }
}
