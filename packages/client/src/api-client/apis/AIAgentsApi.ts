/**
 * Embers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  Agent,
  Agents,
  CreateAgentReq,
  CreateAgentResp,
  CreateTestwalletResp,
  DeployAgentResp,
  DeploySignedTestReq,
  DeploySignedTestResp,
  DeployTestReq,
  DeployTestResp,
  SaveAgentResp,
  SignedContract,
} from "../models/index";

import {
  AgentFromJSON,
  AgentsFromJSON,
  CreateAgentReqToJSON,
  CreateAgentRespFromJSON,
  CreateTestwalletRespFromJSON,
  DeployAgentRespFromJSON,
  DeploySignedTestReqToJSON,
  DeploySignedTestRespFromJSON,
  DeployTestReqToJSON,
  DeployTestRespFromJSON,
  SaveAgentRespFromJSON,
  SignedContractToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface ApiAiAgentsAddressGetRequest {
  address: string;
}

export interface ApiAiAgentsAddressIdVersionsGetRequest {
  address: string;
  id: string;
}

export interface ApiAiAgentsAddressIdVersionsVersionDeployPreparePostRequest {
  address: string;
  id: string;
  version: string;
}

export interface ApiAiAgentsAddressIdVersionsVersionDeploySendPostRequest {
  address: string;
  id: string;
  signedContract: SignedContract;
  version: string;
}

export interface ApiAiAgentsAddressIdVersionsVersionGetRequest {
  address: string;
  id: string;
  version: string;
}

export interface ApiAiAgentsCreatePreparePostRequest {
  createAgentReq: CreateAgentReq;
}

export interface ApiAiAgentsCreateSendPostRequest {
  signedContract: SignedContract;
}

export interface ApiAiAgentsIdSavePreparePostRequest {
  createAgentReq: CreateAgentReq;
  id: string;
}

export interface ApiAiAgentsIdSaveSendPostRequest {
  id: string;
  signedContract: SignedContract;
}

export interface ApiAiAgentsTestDeployPreparePostRequest {
  deployTestReq: DeployTestReq;
}

export interface ApiAiAgentsTestDeploySendPostRequest {
  deploySignedTestReq: DeploySignedTestReq;
}

/**
 *
 */
export class AIAgentsApi extends runtime.BaseAPI {
  /**
   */
  async apiAiAgentsAddressGetRaw(
    requestParameters: ApiAiAgentsAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Agents>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsAddressGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ai-agents/{address}`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address)),
    );

    const response = await this.request(
      {
        headers: headerParameters,
        method: "GET",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentsFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsAddressGet(
    requestParameters: ApiAiAgentsAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Agents> {
    const response = await this.apiAiAgentsAddressGetRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsGetRaw(
    requestParameters: ApiAiAgentsAddressIdVersionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Agents>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsAddressIdVersionsGet().',
      );
    }

    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsAddressIdVersionsGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ai-agents/{address}/{id}/versions`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address)),
    );
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );

    const response = await this.request(
      {
        headers: headerParameters,
        method: "GET",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentsFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsGet(
    requestParameters: ApiAiAgentsAddressIdVersionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Agents> {
    const response = await this.apiAiAgentsAddressIdVersionsGetRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsVersionDeployPreparePostRaw(
    requestParameters: ApiAiAgentsAddressIdVersionsVersionDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeployAgentResp>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionDeployPreparePost().',
      );
    }

    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionDeployPreparePost().',
      );
    }

    if (requestParameters.version == null) {
      throw new runtime.RequiredError(
        "version",
        'Required parameter "version" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionDeployPreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ai-agents/{address}/{id}/versions/{version}/deploy/prepare`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address)),
    );
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );
    urlPath = urlPath.replace(
      `{version}`,
      encodeURIComponent(String(requestParameters.version)),
    );

    const response = await this.request(
      {
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeployAgentRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsVersionDeployPreparePost(
    requestParameters: ApiAiAgentsAddressIdVersionsVersionDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeployAgentResp> {
    const response =
      await this.apiAiAgentsAddressIdVersionsVersionDeployPreparePostRaw(
        requestParameters,
        initOverrides,
      );
    return response.value();
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsVersionDeploySendPostRaw(
    requestParameters: ApiAiAgentsAddressIdVersionsVersionDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionDeploySendPost().',
      );
    }

    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionDeploySendPost().',
      );
    }

    if (requestParameters.version == null) {
      throw new runtime.RequiredError(
        "version",
        'Required parameter "version" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionDeploySendPost().',
      );
    }

    if (requestParameters.signedContract == null) {
      throw new runtime.RequiredError(
        "signedContract",
        'Required parameter "signedContract" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionDeploySendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    let urlPath = `/api/ai-agents/{address}/{id}/versions/{version}/deploy/send`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address)),
    );
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );
    urlPath = urlPath.replace(
      `{version}`,
      encodeURIComponent(String(requestParameters.version)),
    );

    const response = await this.request(
      {
        body: SignedContractToJSON(requestParameters.signedContract),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsVersionDeploySendPost(
    requestParameters: ApiAiAgentsAddressIdVersionsVersionDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.apiAiAgentsAddressIdVersionsVersionDeploySendPostRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsVersionGetRaw(
    requestParameters: ApiAiAgentsAddressIdVersionsVersionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Agent>> {
    if (requestParameters.address == null) {
      throw new runtime.RequiredError(
        "address",
        'Required parameter "address" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionGet().',
      );
    }

    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionGet().',
      );
    }

    if (requestParameters.version == null) {
      throw new runtime.RequiredError(
        "version",
        'Required parameter "version" was null or undefined when calling apiAiAgentsAddressIdVersionsVersionGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ai-agents/{address}/{id}/versions/{version}`;
    urlPath = urlPath.replace(
      `{address}`,
      encodeURIComponent(String(requestParameters.address)),
    );
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );
    urlPath = urlPath.replace(
      `{version}`,
      encodeURIComponent(String(requestParameters.version)),
    );

    const response = await this.request(
      {
        headers: headerParameters,
        method: "GET",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AgentFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsAddressIdVersionsVersionGet(
    requestParameters: ApiAiAgentsAddressIdVersionsVersionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Agent> {
    const response = await this.apiAiAgentsAddressIdVersionsVersionGetRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsCreatePreparePostRaw(
    requestParameters: ApiAiAgentsCreatePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateAgentResp>> {
    if (requestParameters.createAgentReq == null) {
      throw new runtime.RequiredError(
        "createAgentReq",
        'Required parameter "createAgentReq" was null or undefined when calling apiAiAgentsCreatePreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents/create/prepare`;

    const response = await this.request(
      {
        body: CreateAgentReqToJSON(requestParameters.createAgentReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateAgentRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsCreatePreparePost(
    requestParameters: ApiAiAgentsCreatePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateAgentResp> {
    const response = await this.apiAiAgentsCreatePreparePostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsCreateSendPostRaw(
    requestParameters: ApiAiAgentsCreateSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.signedContract == null) {
      throw new runtime.RequiredError(
        "signedContract",
        'Required parameter "signedContract" was null or undefined when calling apiAiAgentsCreateSendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents/create/send`;

    const response = await this.request(
      {
        body: SignedContractToJSON(requestParameters.signedContract),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiAiAgentsCreateSendPost(
    requestParameters: ApiAiAgentsCreateSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.apiAiAgentsCreateSendPostRaw(requestParameters, initOverrides);
  }

  /**
   */
  async apiAiAgentsIdSavePreparePostRaw(
    requestParameters: ApiAiAgentsIdSavePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SaveAgentResp>> {
    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsIdSavePreparePost().',
      );
    }

    if (requestParameters.createAgentReq == null) {
      throw new runtime.RequiredError(
        "createAgentReq",
        'Required parameter "createAgentReq" was null or undefined when calling apiAiAgentsIdSavePreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    let urlPath = `/api/ai-agents/{id}/save/prepare`;
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );

    const response = await this.request(
      {
        body: CreateAgentReqToJSON(requestParameters.createAgentReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SaveAgentRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsIdSavePreparePost(
    requestParameters: ApiAiAgentsIdSavePreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SaveAgentResp> {
    const response = await this.apiAiAgentsIdSavePreparePostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsIdSaveSendPostRaw(
    requestParameters: ApiAiAgentsIdSaveSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling apiAiAgentsIdSaveSendPost().',
      );
    }

    if (requestParameters.signedContract == null) {
      throw new runtime.RequiredError(
        "signedContract",
        'Required parameter "signedContract" was null or undefined when calling apiAiAgentsIdSaveSendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    let urlPath = `/api/ai-agents/{id}/save/send`;
    urlPath = urlPath.replace(
      `{id}`,
      encodeURIComponent(String(requestParameters.id)),
    );

    const response = await this.request(
      {
        body: SignedContractToJSON(requestParameters.signedContract),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiAiAgentsIdSaveSendPost(
    requestParameters: ApiAiAgentsIdSaveSendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.apiAiAgentsIdSaveSendPostRaw(requestParameters, initOverrides);
  }

  /**
   */
  async apiAiAgentsTestDeployPreparePostRaw(
    requestParameters: ApiAiAgentsTestDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeployTestResp>> {
    if (requestParameters.deployTestReq == null) {
      throw new runtime.RequiredError(
        "deployTestReq",
        'Required parameter "deployTestReq" was null or undefined when calling apiAiAgentsTestDeployPreparePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents/test/deploy/prepare`;

    const response = await this.request(
      {
        body: DeployTestReqToJSON(requestParameters.deployTestReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeployTestRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTestDeployPreparePost(
    requestParameters: ApiAiAgentsTestDeployPreparePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeployTestResp> {
    const response = await this.apiAiAgentsTestDeployPreparePostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTestDeploySendPostRaw(
    requestParameters: ApiAiAgentsTestDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeploySignedTestResp>> {
    if (requestParameters.deploySignedTestReq == null) {
      throw new runtime.RequiredError(
        "deploySignedTestReq",
        'Required parameter "deploySignedTestReq" was null or undefined when calling apiAiAgentsTestDeploySendPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; charset=utf-8";

    const urlPath = `/api/ai-agents/test/deploy/send`;

    const response = await this.request(
      {
        body: DeploySignedTestReqToJSON(requestParameters.deploySignedTestReq),
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeploySignedTestRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTestDeploySendPost(
    requestParameters: ApiAiAgentsTestDeploySendPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeploySignedTestResp> {
    const response = await this.apiAiAgentsTestDeploySendPostRaw(
      requestParameters,
      initOverrides,
    );
    return response.value();
  }

  /**
   */
  async apiAiAgentsTestWalletPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateTestwalletResp>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const urlPath = `/api/ai-agents/test/wallet`;

    const response = await this.request(
      {
        headers: headerParameters,
        method: "POST",
        path: urlPath,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateTestwalletRespFromJSON(jsonValue),
    );
  }

  /**
   */
  async apiAiAgentsTestWalletPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateTestwalletResp> {
    const response = await this.apiAiAgentsTestWalletPostRaw(initOverrides);
    return response.value();
  }
}
