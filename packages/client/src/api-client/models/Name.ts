/**
 * Embers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { NameNGVar } from "./NameNGVar";
import { NameNGVarFromJSONTyped, NameNGVarToJSON } from "./NameNGVar";
import type { NameNQuoteGraph } from "./NameNQuoteGraph";
import { NameNQuoteGraphFromJSONTyped, NameNQuoteGraphToJSON } from "./NameNQuoteGraph";
import type { NameNQuoteVertex } from "./NameNQuoteVertex";
import { NameNQuoteVertexFromJSONTyped, NameNQuoteVertexToJSON } from "./NameNQuoteVertex";
import type { NameNVVar } from "./NameNVVar";
import { NameNVVarFromJSONTyped, NameNVVarToJSON } from "./NameNVVar";
import type { NameUnit } from "./NameUnit";
import { NameUnitFromJSONTyped, NameUnitToJSON } from "./NameUnit";

/**
 * @type Name
 *
 * @export
 */
export type Name =
  | ({ type: "GVar" } & NameNGVar)
  | ({ type: "QuoteGraph" } & NameNQuoteGraph)
  | ({ type: "QuoteVertex" } & NameNQuoteVertex)
  | ({ type: "VVar" } & NameNVVar)
  | ({ type: "Wildcard" } & NameUnit);

export function NameFromJSON(json: any): Name {
  return NameFromJSONTyped(json, false);
}

export function NameFromJSONTyped(json: any, ignoreDiscriminator: boolean): Name {
  if (json == null) {
    return json;
  }
  switch (json.type) {
    case "GVar":
      return Object.assign({}, NameNGVarFromJSONTyped(json, true), {
        type: "GVar",
      } as const);
    case "QuoteGraph":
      return Object.assign({}, NameNQuoteGraphFromJSONTyped(json, true), {
        type: "QuoteGraph",
      } as const);
    case "QuoteVertex":
      return Object.assign({}, NameNQuoteVertexFromJSONTyped(json, true), {
        type: "QuoteVertex",
      } as const);
    case "VVar":
      return Object.assign({}, NameNVVarFromJSONTyped(json, true), {
        type: "VVar",
      } as const);
    case "Wildcard":
      return Object.assign({}, NameUnitFromJSONTyped(json, true), {
        type: "Wildcard",
      } as const);
    default:
      return json;
  }
}

export function NameToJSON(json: any): any {
  return NameToJSONTyped(json, false);
}

export function NameToJSONTyped(value?: Name | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }
  switch (value.type) {
    case "GVar":
      return Object.assign({}, NameNGVarToJSON(value), {
        type: "GVar",
      } as const);
    case "QuoteGraph":
      return Object.assign({}, NameNQuoteGraphToJSON(value), {
        type: "QuoteGraph",
      } as const);
    case "QuoteVertex":
      return Object.assign({}, NameNQuoteVertexToJSON(value), {
        type: "QuoteVertex",
      } as const);
    case "VVar":
      return Object.assign({}, NameNVVarToJSON(value), {
        type: "VVar",
      } as const);
    case "Wildcard":
      return Object.assign({}, NameUnitToJSON(value), {
        type: "Wildcard",
      } as const);
    default:
      return value;
  }
}
