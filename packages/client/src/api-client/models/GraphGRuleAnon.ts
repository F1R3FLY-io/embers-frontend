/**
 * Embers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Graph } from "./Graph";

import { GraphFromJSON, GraphToJSON } from "./Graph";

/**
 *
 * @export
 * @interface GraphGRuleAnon
 */
export interface GraphGRuleAnon {
  /**
   *
   * @type {Graph}
   * @memberof GraphGRuleAnon
   */
  graph1: Graph;
  /**
   *
   * @type {Graph}
   * @memberof GraphGRuleAnon
   */
  graph2: Graph;
  /**
   *
   * @type {string}
   * @memberof GraphGRuleAnon
   */
  type: GraphGRuleAnonTypeEnum;
}

/**
 * @export
 */
export const GraphGRuleAnonTypeEnum = {
  RuleAnon: "RuleAnon",
} as const;
export type GraphGRuleAnonTypeEnum =
  (typeof GraphGRuleAnonTypeEnum)[keyof typeof GraphGRuleAnonTypeEnum];

/**
 * Check if a given object implements the GraphGRuleAnon interface.
 */
export function instanceOfGraphGRuleAnon(value: object): value is GraphGRuleAnon {
  if (!("graph1" in value) || value.graph1 === undefined) {
    return false;
  }
  if (!("graph2" in value) || value.graph2 === undefined) {
    return false;
  }
  if (!("type" in value) || value.type === undefined) {
    return false;
  }
  return true;
}

export function GraphGRuleAnonFromJSON(json: any): GraphGRuleAnon {
  return GraphGRuleAnonFromJSONTyped(json, false);
}

export function GraphGRuleAnonFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GraphGRuleAnon {
  if (json == null) {
    return json;
  }
  return {
    graph1: GraphFromJSON(json.graph_1),
    graph2: GraphFromJSON(json.graph_2),
    type: json.type,
  };
}

export function GraphGRuleAnonToJSON(json: any): GraphGRuleAnon {
  return GraphGRuleAnonToJSONTyped(json, false);
}

export function GraphGRuleAnonToJSONTyped(
  value?: GraphGRuleAnon | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    graph_1: GraphToJSON(value.graph1),
    graph_2: GraphToJSON(value.graph2),
    type: value.type,
  };
}
