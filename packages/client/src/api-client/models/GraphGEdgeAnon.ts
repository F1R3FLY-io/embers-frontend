/**
 * Embers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Binding } from "./Binding";

import { BindingFromJSON, BindingToJSON } from "./Binding";

/**
 *
 * @export
 * @interface GraphGEdgeAnon
 */
export interface GraphGEdgeAnon {
  /**
   *
   * @type {Binding}
   * @memberof GraphGEdgeAnon
   */
  binding1: Binding;
  /**
   *
   * @type {Binding}
   * @memberof GraphGEdgeAnon
   */
  binding2: Binding;
  /**
   *
   * @type {string}
   * @memberof GraphGEdgeAnon
   */
  type: GraphGEdgeAnonTypeEnum;
}

/**
 * @export
 */
export const GraphGEdgeAnonTypeEnum = {
  EdgeAnon: "EdgeAnon",
} as const;
export type GraphGEdgeAnonTypeEnum =
  (typeof GraphGEdgeAnonTypeEnum)[keyof typeof GraphGEdgeAnonTypeEnum];

/**
 * Check if a given object implements the GraphGEdgeAnon interface.
 */
export function instanceOfGraphGEdgeAnon(value: object): value is GraphGEdgeAnon {
  if (!("binding1" in value) || value.binding1 === undefined) {
    return false;
  }
  if (!("binding2" in value) || value.binding2 === undefined) {
    return false;
  }
  if (!("type" in value) || value.type === undefined) {
    return false;
  }
  return true;
}

export function GraphGEdgeAnonFromJSON(json: any): GraphGEdgeAnon {
  return GraphGEdgeAnonFromJSONTyped(json, false);
}

export function GraphGEdgeAnonFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GraphGEdgeAnon {
  if (json == null) {
    return json;
  }
  return {
    binding1: BindingFromJSON(json.binding_1),
    binding2: BindingFromJSON(json.binding_2),
    type: json.type,
  };
}

export function GraphGEdgeAnonToJSON(json: any): GraphGEdgeAnon {
  return GraphGEdgeAnonToJSONTyped(json, false);
}

export function GraphGEdgeAnonToJSONTyped(
  value?: GraphGEdgeAnon | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    binding_1: BindingToJSON(value.binding1),
    binding_2: BindingToJSON(value.binding2),
    type: value.type,
  };
}
