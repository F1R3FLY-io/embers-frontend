/**
 * Embers API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { GraphBinding } from "./GraphBinding";
import { GraphBindingFromJSONTyped, GraphBindingToJSON } from "./GraphBinding";
import type { GraphGEdgeAnon } from "./GraphGEdgeAnon";
import { GraphGEdgeAnonFromJSONTyped, GraphGEdgeAnonToJSON } from "./GraphGEdgeAnon";
import type { GraphGEdgeNamed } from "./GraphGEdgeNamed";
import { GraphGEdgeNamedFromJSONTyped, GraphGEdgeNamedToJSON } from "./GraphGEdgeNamed";
import type { GraphGRuleAnon } from "./GraphGRuleAnon";
import { GraphGRuleAnonFromJSONTyped, GraphGRuleAnonToJSON } from "./GraphGRuleAnon";
import type { GraphGRuleNamed } from "./GraphGRuleNamed";
import { GraphGRuleNamedFromJSONTyped, GraphGRuleNamedToJSON } from "./GraphGRuleNamed";
import type { GraphGSubgraph } from "./GraphGSubgraph";
import { GraphGSubgraphFromJSONTyped, GraphGSubgraphToJSON } from "./GraphGSubgraph";
import type { GraphGTensor } from "./GraphGTensor";
import { GraphGTensorFromJSONTyped, GraphGTensorToJSON } from "./GraphGTensor";
import type { GraphGVar } from "./GraphGVar";
import { GraphGVarFromJSONTyped, GraphGVarToJSON } from "./GraphGVar";
import type { GraphGVertex } from "./GraphGVertex";
import { GraphGVertexFromJSONTyped, GraphGVertexToJSON } from "./GraphGVertex";
import type { GraphUnit } from "./GraphUnit";
import { GraphUnitFromJSONTyped, GraphUnitToJSON } from "./GraphUnit";

/**
 * @type Graph
 *
 * @export
 */
export type Graph =
  | ({ type: "EdgeAnon" } & GraphGEdgeAnon)
  | ({ type: "EdgeNamed" } & GraphGEdgeNamed)
  | ({ type: "Nil" } & GraphUnit)
  | ({ type: "Nominate" } & GraphBinding)
  | ({ type: "RuleAnon" } & GraphGRuleAnon)
  | ({ type: "RuleNamed" } & GraphGRuleNamed)
  | ({ type: "Subgraph" } & GraphGSubgraph)
  | ({ type: "Tensor" } & GraphGTensor)
  | ({ type: "Var" } & GraphGVar)
  | ({ type: "Vertex" } & GraphGVertex);

export function GraphFromJSON(json: any): Graph {
  return GraphFromJSONTyped(json, false);
}

export function GraphFromJSONTyped(json: any, _ignoreDiscriminator: boolean): Graph {
  if (json == null) {
    return json;
  }
  switch (json.type) {
    case "EdgeAnon":
      return Object.assign({}, GraphGEdgeAnonFromJSONTyped(json, true), {
        type: "EdgeAnon",
      } as const);
    case "EdgeNamed":
      return Object.assign({}, GraphGEdgeNamedFromJSONTyped(json, true), {
        type: "EdgeNamed",
      } as const);
    case "Nil":
      return Object.assign({}, GraphUnitFromJSONTyped(json, true), {
        type: "Nil",
      } as const);
    case "Nominate":
      return Object.assign({}, GraphBindingFromJSONTyped(json, true), {
        type: "Nominate",
      } as const);
    case "RuleAnon":
      return Object.assign({}, GraphGRuleAnonFromJSONTyped(json, true), {
        type: "RuleAnon",
      } as const);
    case "RuleNamed":
      return Object.assign({}, GraphGRuleNamedFromJSONTyped(json, true), {
        type: "RuleNamed",
      } as const);
    case "Subgraph":
      return Object.assign({}, GraphGSubgraphFromJSONTyped(json, true), {
        type: "Subgraph",
      } as const);
    case "Tensor":
      return Object.assign({}, GraphGTensorFromJSONTyped(json, true), {
        type: "Tensor",
      } as const);
    case "Var":
      return Object.assign({}, GraphGVarFromJSONTyped(json, true), {
        type: "Var",
      } as const);
    case "Vertex":
      return Object.assign({}, GraphGVertexFromJSONTyped(json, true), {
        type: "Vertex",
      } as const);
    default:
      return json;
  }
}

export function GraphToJSON(json: any): any {
  return GraphToJSONTyped(json, false);
}

export function GraphToJSONTyped(value?: Graph | null, _ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }
  switch (value.type) {
    case "EdgeAnon":
      return Object.assign({}, GraphGEdgeAnonToJSON(value), {
        type: "EdgeAnon",
      } as const);
    case "EdgeNamed":
      return Object.assign({}, GraphGEdgeNamedToJSON(value), {
        type: "EdgeNamed",
      } as const);
    case "Nil":
      return Object.assign({}, GraphUnitToJSON(value), {
        type: "Nil",
      } as const);
    case "Nominate":
      return Object.assign({}, GraphBindingToJSON(value), {
        type: "Nominate",
      } as const);
    case "RuleAnon":
      return Object.assign({}, GraphGRuleAnonToJSON(value), {
        type: "RuleAnon",
      } as const);
    case "RuleNamed":
      return Object.assign({}, GraphGRuleNamedToJSON(value), {
        type: "RuleNamed",
      } as const);
    case "Subgraph":
      return Object.assign({}, GraphGSubgraphToJSON(value), {
        type: "Subgraph",
      } as const);
    case "Tensor":
      return Object.assign({}, GraphGTensorToJSON(value), {
        type: "Tensor",
      } as const);
    case "Var":
      return Object.assign({}, GraphGVarToJSON(value), {
        type: "Var",
      } as const);
    case "Vertex":
      return Object.assign({}, GraphGVertexToJSON(value), {
        type: "Vertex",
      } as const);
    default:
      return value;
  }
}
