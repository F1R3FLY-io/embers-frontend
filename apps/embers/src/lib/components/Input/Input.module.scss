@use "sass:map";

// Size configuration via SCSS map and mixin
$input-sizes: (
  small: (
    font: var(--font-small),
    line: 1.4,
    pad-x: 12px,
    pad-y: 8px,
    min-h: 80px,
  ),
  medium: (
    font: var(--font-normal),
    line: 1.4,
    pad-x: 16px,
    pad-y: 12px,
    min-h: 120px,
  ),
  large: (
    font: var(--font-large),
    line: 1.3,
    pad-x: 20px,
    pad-y: 16px,
    min-h: 160px,
  ),
);

@mixin input-size($key) {
  $cfg: map.get($input-sizes, $key);

  padding: map.get($cfg, pad-y) map.get($cfg, pad-x);

  .textarea {
    min-height: map.get($cfg, min-h);
  }

  .input,
  .textarea {
    font-size: map.get($cfg, font);
    line-height: map.get($cfg, line);

    &::placeholder {
      font-size: inherit;
      line-height: inherit;
      color: var(--text-disabled);
    }

    &:disabled {
      color: var(--text-disabled);
    }
  }
}

$placeholder-colors: (
  primary: var(--text-color-primary),
  secondary: var(--text-color-secondary),
  hover: var(--button-hover),
);

@mixin placeholder-color-classes() {
  @each $name, $value in $placeholder-colors {
    &.placeholder-#{$name}::placeholder {
      color: $value;
    }
  }
}

@mixin text-color-classes() {
  &.text-primary {
    color: var(--text-color-primary);
  }

  &.text-secondary {
    color: var(--text-color-secondary);
  }

  &.text-hover {
    color: var(--button-hover);
  }
}

// Variant configuration via SCSS map and mixin
$input-variants: (
  default: (
    background: var(--background-neutral-hover),
    border: none,
    focus-box: inset 0 0 0 2px var(--border-selected),
    focus-border-color: transparent,
  ),
  filled: (
    background: var(--background-neutral-surface),
    border: none,
    focus-box: inset 0 0 0 2px var(--border-selected),
    focus-border-color: transparent,
  ),
  outline: (
    background: transparent,
    border: 1px solid var(--border-primary),
    focus-box: inset 0 0 0 2px var(--border-selected),
    focus-border-color: transparent,
  ),
);

@mixin input-variant($key) {
  $cfg: map.get($input-variants, $key);

  background-color: map.get($cfg, background);
  border: map.get($cfg, border);
  box-shadow: none;

  &:focus-within {
    box-shadow: map.get($cfg, focus-box);
    border-color: map.get($cfg, focus-border-color);
  }
}

.container {
  display: flex;
  align-items: center;
  gap: 8px;
  box-sizing: border-box;
  width: 100%;
  padding: 12px 16px;
  margin-top: 8px;
  background-color: var(--background-neutral-hover);
  border: none;
  border-radius: 8px;
  transition: all 0.2s ease;
  color: var(--text-color-primary);

  &:focus-within {
    outline: none;
    box-shadow: inset 0 0 0 2px var(--border-selected);
  }

  &:has(.input:disabled, .textarea:disabled) {
    opacity: 0.8;
  }

  &.error {
    box-shadow: inset 0 0 0 2px var(--text-danger);
  }

  /* Variant applied via data attribute */
  &[data-variant="default"] {
    @include input-variant(default);
  }

  &[data-variant="filled"] {
    @include input-variant(filled);
  }

  &[data-variant="outline"] {
    @include input-variant(outline);
  }

  /* Size variants applied via data attribute */
  &[data-size="small"] {
    @include input-size(small);
  }

  &[data-size="medium"] {
    @include input-size(medium);
  }

  &[data-size="large"] {
    @include input-size(large);
  }

  &.has-left-icon {
    padding-left: 12px;
  }

  &.has-right-icon {
    padding-right: 12px;
  }

  /* Error state via ARIA */
  &:has(.input[aria-invalid="true"], .textarea[aria-invalid="true"]) {
    box-shadow: inset 0 0 0 2px var(--text-danger);
  }
}

.input {
  all: unset;
  flex: 1;
  font-family: Manrope, sans-serif;

  @include text-color-classes;
  @include placeholder-color-classes;
}

.textarea {
  all: unset;
  flex: 1;
  min-height: 120px;
  resize: none;
  font-family: Manrope, sans-serif;

  @include text-color-classes;
  @include placeholder-color-classes;
}

.left-icon,
.right-icon {
  display: flex;
  align-items: center;
  color: var(--text-color-secondary);

  svg {
    width: 20px;
    height: 20px;
  }
}

.error-text {
  margin-top: 6px;
  color: var(--text-danger);
}
